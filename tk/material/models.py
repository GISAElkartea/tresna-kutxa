from django.db import models

from django.utils.translation import ugettext as _


class Subject(models.Model):
    class Meta:
        verbose_name = _("Subject")
        verbose_name_plural = _("Subjects")

    name = models.CharField(max_length=512, verbose_name=_("name"))

    def __str__(self):
        return self.name


class Goal(models.Model):
    class Meta:
        verbose_name = _("Goal")
        verbose_name_plural = _("Goals")

    name = models.CharField(max_length=512, verbose_name=_("name"))

    def __str__(self):
        return self.name


class GroupFeature(models.Model):
    class Meta:
        verbose_name = _("Group feature")
        verbose_name_plural = _("Group features")

    name = models.CharField(max_length=512, verbose_name=_("name"))

    def __str__(self):
        return self.name


class Language(models.Model):
    class Meta:
        verbose_name = _("Language")
        verbose_name_plural = _("Language")

    name = models.CharField(max_length=512, verbose_name=_("name"))
    # TODO: Code?
    # TODO: Prepopulate
    # TODO: Autocomplete search interface

    def __str__(self):
        return self.name


class Material(models.Model):
    class Meta:
        abstract = True

    title = models.CharField(max_length=512, verbose_name=_("title"))
    # TODO: Autogenerated slug
    subject = models.ForeignKey(Subject, verbose_name=_("subject"))
    brief = models.TextField(blank=True, verbose_name=_("brief"))
    author = models.CharField(blank=True, verbose_name=_("author"))
    # TODO: Add help text with the warning about copyright
    link = models.URLField(blank=True, verbose_name=_("link"))

    def __str__(self):
        return self.title


class Activity(Material):
    class Meta:
        verbose_name = _("Activity")
        verbose_name_plural = _("Activities")

    subject = models.ForeignKey(Subject, null=True, blank=True, verbose_name=_("subject"))
    goal = models.ForeignKey(Goal, verbose_name=_("goal"))

    # TODO: Place?
    # TODO: Single point duration or range?
    duration = models.DurationField(verbose_name=_("duration"))
    # TODO: Single point num_people or range?
    num_people = models.PositiveSmallIntegerField(verbose_name=_("number of people"))
    group_feature = models.ForeignKey(GroupFeature, null=True, blank=True, verbose_name=_("group feature"))
    notes = models.TextField(blank=True, verbose_name=_("notes"))
    # TODO: Attachments generic relation


class Reading(Material):
    class Meta:
        verbose_name = _("Reading")
        verbose_name_plural = _("Reading")

    pages = models.PositiveIntegerField(verbose_name=_("pages"))
    # TODO: Top-limit to current year in forms
    year = models.PositiveIntegerField(verbose_name=_("year"))
    language = models.ForeignKey(Language, verbose_name=_("language"))
    # TODO: Attachments generic relation


class Video(Material):
    class Meta:
        verbose_name = _("Video")
        verbose_name_plural = _("Videos")

    duration = models.DurationField(verbose_name=_("duration"))
    # TODO: Top-limit to current year in forms
    year = models.PositiveIntegerField(verbose_name=_("year"))
    audio = models.ForeignKey(Language, verbose_name=_("language"))
    subtitles = models.ForeignKey(Language, verbose_name=_("language"))
    # TODO: Attachments generic relation
